"""
Django settings for communication project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables
load_dotenv()  # loads .env sitting next to manage.py (or current cwd)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-%lubw_*o0a62e%x!^iyfc+5p)b0fv+c3_d=%#up!dmv$x@a7u+'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Database encryption key
DB_ENCRYPTION_KEY = os.environ.get("DB_ENCRYPTION_KEY")

# Internal service-to-service config
ACCOUNTS_URL = os.getenv("ACCOUNTS_URL")  # e.g. http://localhost:8001
INTERNAL_REGISTER_DB_TOKEN = os.getenv("INTERNAL_REGISTER_DB_TOKEN")
ACCOUNTS_TIMEOUT = int(os.getenv("ACCOUNTS_TIMEOUT", "10"))

# Application definition
INSTALLED_APPS = [
    
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'communicationapp',
    'rest_framework',
    'api',
    'corsheaders',
    'config',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'communication.middleware.TenantMiddleware',
]

ROOT_URLCONF = 'communication.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'communication.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Multi-Tenant Database Router Configuration
DATABASE_ROUTERS = [
    'communication.db_router.MultiTenantDatabaseRouter',
]

# Tenant Management Settings
MAX_TENANT_DATABASES = 100

# Environment-specific tenant database settings
if DEBUG:
    # Development settings
    TENANT_DB_DEFAULTS = {
        'ENGINE': 'django.db.backends.postgresql',
        'USER': 'postgres',
        'PASSWORD': 'postgres',
        'HOST': 'localhost',
        'PORT': '5432',
        'TIME_ZONE': None,  # Added TIME_ZONE
        'OPTIONS': {
            'sslmode': 'prefer',
        },
    }
else:
    # Production settings
    TENANT_DB_DEFAULTS = {
        'ENGINE': 'django.db.backends.postgresql',
        'USER': os.getenv('PROD_DB_USER'),
        'PASSWORD': os.getenv('PROD_DB_PASSWORD'),
        'HOST': os.getenv('PROD_DB_HOST'),
        'PORT': os.getenv('PROD_DB_PORT', '5432'),
        'TIME_ZONE': None,  # Added TIME_ZONE
        'OPTIONS': {
            'sslmode': 'require',
        },
    }

# Default tenant database configuration template
DEFAULT_TENANT_DB_CONFIG = {
    'ENGINE': 'django.db.backends.postgresql',
    'TIME_ZONE': None,  # Added TIME_ZONE - this will use the global TIME_ZONE setting
    'OPTIONS': {
        'sslmode': 'prefer',
    },
    'CONN_MAX_AGE': 600,
    "CONN_HEALTH_CHECKS": False,
}

# Update default tenant config with environment-specific settings
DEFAULT_TENANT_DB_CONFIG.update(TENANT_DB_DEFAULTS)


# Dynamic Tenant Database Configuration
def configure_tenant_database(tenant_id, db_config):
    """
    Dynamically add a tenant database to Django's DATABASES setting.
    
    Args:
        tenant_id (str): The tenant identifier
        db_config (dict): Database configuration dictionary
    
    Example:
        configure_tenant_database('tenant123', {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'tenant123_db',
            'USER': 'postgres',
            'PASSWORD': 'your_password',
            'HOST': 'localhost',
            'PORT': '5432',
            'OPTIONS': {
                'sslmode': 'prefer',
            },
        })
    """
    if tenant_id and tenant_id != 'default':
        database_alias = f'client_{tenant_id}'

        final_config = DEFAULT_TENANT_DB_CONFIG.copy()
        final_config.update(db_config)

        # Ensure critical keys always exist
        final_config.setdefault("TIME_ZONE", None)
        # final_config.setdefault("CONN_HEALTH_CHECKS", True)   # ðŸ”‘ always present
        final_config.setdefault("CONN_MAX_AGE", 600)

        DATABASES[database_alias] = final_config
def cleanup_tenant_databases():
    """Clean up unused tenant database connections"""
    from django.db import connections
    
    # Get list of current tenant databases
    tenant_dbs = [alias for alias in DATABASES.keys() if alias.startswith('client_')]
    
    # Close connections for databases not in use
    for alias in list(connections.databases.keys()):
        if alias.startswith('client_') and alias not in tenant_dbs:
            try:
                connections[alias].close()
                del connections.databases[alias]
            except KeyError:
                pass  # Already cleaned up

def get_tenant_database_config(tenant_id, **overrides):
    """
    Get database configuration for a specific tenant.
    
    Args:
        tenant_id (str): The tenant identifier
        **overrides: Additional database configuration overrides
    
    Returns:
        dict: Database configuration dictionary
    """
    config = DEFAULT_TENANT_DB_CONFIG.copy()
    
    # Default naming convention
    config.update({
        'NAME': f'{tenant_id}_db',
        'USER': os.getenv('TENANT_DB_USER', 'postgres'),
        'PASSWORD': os.getenv('TENANT_DB_PASSWORD', ''),
        'HOST': os.getenv('TENANT_DB_HOST', 'localhost'),
        'PORT': os.getenv('TENANT_DB_PORT', '5432'),
        'TIME_ZONE': None,  # Added TIME_ZONE
    })
    
    # Apply any overrides
    config.update(overrides)
    
    return config

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'  
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework Configuration
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticated",
    ),
}

# CORS Settings (if needed for your frontend)
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # React dev server
    "http://127.0.0.1:3000",
]

CORS_ALLOW_CREDENTIALS = True

# Logging Configuration for Multi-Tenant Debugging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'debug.log',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'communication.db_router': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'communication.middleware': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# Enable connection health checks (prevents stale connections)

